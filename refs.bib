@online{aws:athena,
  title = {Amazon Athena},
  author = {Amazon},
  howpublished = {\url{https://aws.amazon.com/athena/}},
  year = {2020 (accessed June 2020)}
}

@online{aws:aurora,
  title = {Amazon Aurora},
  author = {Amazon},
  howpublished = {\url{https://aws.amazon.com/rds/aurora/}},
  year = {2020 (accessed June 2020)}
}

@online{aws:costcalc,
  title = {AWS Pricing Calculator},
  howpublished = {\url{http://calculator.aws/}},
  year = {2020, (accessed June 2020)}
}

@online{google:bigquery,
  title = {Google Big Query},
  author = {Kazunori Sato},
  howpublished = {\url{https://cloud.google.com/files/BigQueryTechnicalWP.pdf}},
  year = {2020, (accessed June 2020)}
}

@online{google:infra,
  title = {Google Edge Network},
  howpublished = {\url{https://peering.google.com/#/infrastructure}},
  year = {2020, (accessed June 2020)}
}

@article{pbailis:hats,
author = {Bailis, Peter and Davidson, Aaron and Fekete, Alan and Ghodsi, Ali and Hellerstein, Joseph M. and Stoica, Ion},
title = {Highly Available Transactions: Virtues and Limitations},
year = {2013},
issue_date = {November 2013},
publisher = {VLDB Endowment},
volume = {7},
number = {3},
issn = {2150-8097},
url = {https://doi.org/10.14778/2732232.2732237},
doi = {10.14778/2732232.2732237},
journal = {Proc. VLDB Endow.},
month = nov,
pages = {181–192},
numpages = {12}
}

@article{ramsay/retrievaltimesinvestigation,
    author = {Ramsay, Judith and Barbesi, Alessandro and Preece, Jenny},
    title = "{A psychological investigation of long retrieval times on the World Wide Web}",
    journal = {Interacting with Computers},
    volume = {10},
    number = {1},
    pages = {77-86},
    year = {1998},
    month = {03},
    abstract = "{With the increasingly rapid uptake of the World Wide Web, even those pages classed as ‘the best of the web’ are not immune to large download latencies. This paper investigates whether the latency between requesting a page and receiving it influence user perceptions of the page. The paper describes a study in which users are presented with seven different web pages with delays ranging from 2 s to 2 min, and are then asked to rate the pages on a number of criteria. Predetermined delays were injected into the page loading process. Pages which were retrieved faster were judged significantly more interesting than their slower counterparts. The implications for web page design are discussed.}",
    issn = {0953-5438},
    doi = {10.1016/S0953-5438(97)00019-2},
    url = {https://doi.org/10.1016/S0953-5438(97)00019-2},
    eprint = {https://academic.oup.com/iwc/article-pdf/10/1/77/2706271/iwc10-0077.pdf},
}


@article{ceaparu:userfrustration,
author = { Irina   Ceaparu  and  Jonathan   Lazar  and  Katie   Bessiere  and  John   Robinson  and  Ben   Shneiderman },
title = {Determining Causes and Severity of  End-User Frustration},
journal = {International Journal of HumanâComputer Interaction},
volume = {17},
number = {3},
pages = {333-356},
year  = {2004},
publisher = {Taylor & Francis},
doi = {10.1207/s15327590ijhc1703\_3},
URL = {https://doi.org/10.1207/s15327590ijhc1703_3},
}

@inproceedings{bouch:qualityeyebeholder,
author = {Bouch, Anna and Kuchinsky, Allan and Bhatti, Nina},
title = {Quality is in  the Eye of the Beholder: Meeting Users’ Requirements for Internet Quality of Service},
year = {2000},
isbn = {1581132166},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/332040.332447},
doi = {10.1145/332040.332447},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {297–304},
numpages = {8},
keywords = {quality of service, user perception, Internet},
location = {The Hague, The Netherlands},
series = {CHI ’00}
}

@online{schurman:rerformanceuserimpact,
  title={Performance related changes and their user impact},
  author={Schurman, Eric and Brutlag, Jake},
  howpublished = {\url{https://conferences.oreilly.com/velocity/velocity2009/public/schedule/detail/8523}},
  year={2009 (accessed June 2020)}
}

@online{dixon:shopzillasiteredo,
  title={Shopzilla's Site Redo - You Get What You Measure},
  author={Dixon, Philip},
  howpublished = {\url{https://conferences.oreilly.com/velocity/velocity2009/public/schedule/detail/7709}},
  year={2009 (accessed June 2020)}
}

@online{akamai:travelsiteperformance,
  title = {Consumer Response to Travel Site Performance},
  author = {Akamai},
  howpublished = {\url{https://www.akamai.com/us/en/about/news/press/2010-press/new-study-reveals-the-impact-of-travel-site-performance-on-consumers.jsp}},
  year = {2010 (accessed June 2020)}
}

@book{buttcher:informationretrieval,
  author = {B\"{u}ttcher, Stefan and Clarke, Charles and Cormack, Gordon V.},
  title = {Information Retrieval: Implementing and Evaluating Search Engines},
  year = {2010},
  isbn = {0262026511},
  publisher = {The MIT Press}
}

@inproceedings{tan:diffindex,
  title = "Diff-index: Differentiated index in distributed log-structured data stores",
  abstract = "Log-Structured-Merge (LSM) Tree gains much attention recently because of its superior performance in write-intensive workloads. LSM Tree uses an append-only structure in memory to achieve low write latency; at memory capacity, in-memory data are flushed to other storage media (e.g. disk). Consequently, read access is slower comparing to write. These specific features of LSM, including no in-place update and asymmetric read/write performance raise unique challenges in index maintenance for LSM. The structural difference between LSM and B-Tree also prevents mature B-Tree based approaches from being directly applied. To address the issues of index maintenance for LSM, we propose Diff-Index to support a spectrum of index maintenance schemes to suit different objectives in index consistency and performance. The schemes consist of sync-full, sync-insert, async-simple and async-session. Experiments on our HBase implementation quantitatively demonstrate that Diff-Index offers various performance/consistency balance and satisfactory scalability while avoiding global coordination. Syncinsert and async-simple can reduce 60%-80% of the overall index update latency when compared to the baseline syncfull; async-simple can achieve superior index update performance with an acceptable inconsistency. Diff-Index exploits LSM features such as versioning and the flush-compact process to achieve goals of concurrency control and failure recovery with low complexity and overhead. Diff-Index is included in IBM InfoSphere BigInsights, an IBM big data offering.",
  keywords = "Cap theorem, Distributed databases, Failure recovery, Log-Structured Merge (LSM) tree, Secondary index",
  author = "Wei Tan and Sandeep Tata and Liana Fong and Yuzhe Tang",
  year = "2014",
  doi = "10.5441/002/edbt.2014.76",
  language = "English (US)",
  pages = "700--711",
  booktitle = "Advances in Database Technology - EDBT 2014: 17th International Conference on Extending Database Technology, Proceedings",
  publisher = "OpenProceedings.org, University of Konstanz, University Library",
  note = "17th International Conference on Extending Database Technology, EDBT 2014 ; Conference date: 24-03-2014 Through 28-03-2014",
}

@inproceedings{qi:secondaryindexconsistencyanalysis,
  author={ {Houliang Qi} and  {Xu Chang} and  {Xingwu Liu} and  {Li Zha}},
  booktitle={2017 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)}, 
  title={The consistency analysis of secondary index on distributed ordered tables}, 
  year={2017},
  volume={},
  number={},
  pages={1058-1067},
}

@inproceedings{shukla:schemaagnostic,
  author = {Shukla, Dharma and Thota, Shireesh and Raman, Karthik and Gajendran, Madhan and Shah, Ankur and Ziuzin,  Sergii and Sundaram, Krishnan and Guajardo, Miguel Gonzalez and Wawrzyniak, Anna and Boshra, Samer and Ferreira, Renato and Nassar, Mohamed and Koltachev, Michael and Huang, Ji and Sengupta, Sudipta and Levandoski, Justin and Lomet, David},
  title = {Schema-Agnostic Indexing with Azure DocumentDB},
  booktitle = {Proceedings of the VLDB Endowment},
  year = {2015},
  month = {September},
  abstract = {Azure DocumentDB is Microsoftâs multi-tenant distributed database service for managing JSON documents at Internet scale. DocumentDB is now generally available to Azure developers. In this paper, we describe the DocumentDB indexing subsystem. DocumentDB indexing enables automatic indexing of documents without requiring a schema or secondary indices. Uniquely, DocumentDB provides real-time consistent queries in the face of very high rates of document updates. As a multi-tenant service, DocumentDB is designed to operate within extremely frugal resource budgets while providing predictable performance and robust resource isolation to its tenants. This paper describes the DocumentDB capabilities, including document representation, query language, document indexing approach, core index support, and early production experiences.},
  url = {https://www.microsoft.com/en-us/research/publication/schema-agnostic-indexing-azure-documentdb/},
  edition = {Proceedings of the VLDB Endowment},
}