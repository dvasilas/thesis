-- Ch: Intro --

@inproceedings{busch:earlybird,
author = {Busch, Michael and Gade, Krishna and Larson, Brian and Lok, Patrick and Luckenbill, Samuel and Lin, Jimmy},
title = {Earlybird: Real-Time Search at Twitter},
year = {2012},
isbn = {9780769547473},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICDE.2012.149},
doi = {10.1109/ICDE.2012.149},
abstract = {The web today is increasingly characterized by social and real-time signals, which we believe represent two frontiers in information retrieval. In this paper, we present Early bird, the core retrieval engine that powers Twitter's real-time search service. Although Early bird builds and maintains inverted indexes like nearly all modern retrieval engines, its index structures differ from those built to support traditional web search. We describe these differences and present the rationale behind our design. A key requirement of real-time search is the ability to ingest content rapidly and make it searchable immediately, while concurrently supporting low-latency, high-throughput query evaluation. These demands are met with a single-writer, multiple-reader concurrency model and the targeted use of memory barriers. Early bird represents a point in the design space of real-time search engines that has worked well for Twitter's needs. By sharing our experiences, we hope to spur additional interest and innovation in this exciting space.},
booktitle = {Proceedings of the 2012 IEEE 28th International Conference on Data Engineering},
pages = {1360–-1369},
numpages = {10},
series = {ICDE '12}
}

-- Ch: Background --

% NoSQL Database Systems: A Survey and Decision Guidance
% https://www.baqend.com/files/nosql-survey.pdf

% A Survey on NoSQL Databases
% https://pdfs.semanticscholar.org/60e4/7cebd354b958d8b9b1576d1645b9fe04440a.pdf


@online{bson:spec,
  title = {{BSON} specification},
  howpublished = {\url{http://bsonspec.org/}}
}

@online{hbasebigtable:comparison,
  title = {{HB}ase vs. {B}ig{T}able {C}omparison},
  author = {Lars George},
  howpublished = {\url{http://www.larsgeorge.com/2009/11/hbase-vs-bigtable-comparison.html}},
  year = {2009}
}

@online{riakv:secondaryindexes,
  title = {Riak {KV} 2.2.3 {R}elease {N}otes: {S}econdary {I}ndexes {R}eference},
  author = {Amazon},
  howpublished = {\url{https://docs.riak.com/riak/kv/latest/using/reference/secondary-indexes/index.html}},
  year = {2017}
}

@online{cassandra:secondaryindexing,
  title = {The sweet spot for {C}assandra secondary indexing},
  author = {Richard Low},
  howpublished = {\url{https://web.archive.org/web/20191228135404/http://www.wentnet.com/blog/}},
  year = {2013}
}

@online{elastic:docrouting,
  title = {Customizing Your Document Routing},
  author = {Zachary Tong},
  howpublished = {\url{https://www.elastic.co/blog/customizing-your-document-routing/}},
  year = {2013}
}

@online{solr:indexsharding,
  title = {Apache {S}olr {R}eference {G}uide: {D}istributed {S}earch with {I}ndex {S}harding},
  author = {Apache {S}oftware {F}oundation},
  howpublished = {\url{https://lucene.apache.org/solr/guide/6_6/distributed-search-with-index-sharding.html}},
  year = {2017}
}

@online{mongo:hashpartitioning,
  title = {New {H}ash-based {S}harding {F}eature in {M}ongo{DB} 2.4},
  author = {MongDB, Inc.},
  howpublished = {\url{https://www.mongodb.com/blog/post/new-hash-based-sharding-feature-in-mongodb-24}},
  year = {2013}
}

@online{mongo:shards,
  title = {Mongo{DB} {M}anual: {S}hards},
  author = {MongDB, Inc.},
  howpublished = {\url{https://docs.mongodb.com/manual/core/sharded-cluster-shards/}},
  year = {2020}
}

@online{elastic:shards,
  title = {Elasticsearch {R}eference [7.9]: {S}calability and resilience: clusters, nodes, and shards},
  author = {Elastic},
  howpublished = {\url{https://www.elastic.co/guide/en/elasticsearch/reference/7.9/scalability.html}},
  year = {2020}
}

@online{hbase:regions,
  title = {Apache {HB}ase {R}eference {G}uide: {R}egions},
  author = {Apache {HB}ase {T}eam},
  howpublished = {\url{https://hbase.apache.org/2.2/book.html#regions.arch}},
  year = {2020}
}

@online{bigtable:tablets,
  title = {Overview of {C}loud {B}igtable},
  author = {Google Cloud},
  howpublished = {\url{https://cloud.google.com/bigtable/docs/overview}},
  year = {2020}
}

@online{cassandra:vnodes,
  title = {{A}pache {C}assandra {D}ocumentation: {A}rchitecture, {D}ynamo },
  author = {{T}he {A}pache {S}oftware {F}oundation},
  howpublished = {\url{https://cassandra.apache.org/doc/latest/architecture/dynamo.html}},
  year = {2016}
}

@online{riak:vnodes,
  title = {Riak {KV} {D}ocumentation: {C}lusters},
  author = {Riak {L}abs},
  howpublished = {\url{https://docs.riak.com/riak/kv/2.2.3/learn/concepts/clusters.1.html}},
  year = {2016}
}

@online{dynamodb:secondaryindexes,
  title = {Amazon {D}ynamo{DB} {D}ocumentation: {I}mproving {D}ata {A}ccess with {S}econdary {I}ndexes},
  author = {Amazon {W}eb {S}ervices},
  howpublished = {\url{https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SecondaryIndexes.html}},
  year = {2020}
}

@inproceedings {kejriwal:slik,
author = {Ankita Kejriwal and Arjun Gopalan and Ashish Gupta and Zhihao Jia and Stephen Yang and John Ousterhout},
title = {{SLIK}: Scalable Low-Latency Indexes for a Key-Value Store},
booktitle = {2016 {USENIX} Annual Technical Conference ({USENIX} {ATC} 16)},
year = {2016},
isbn = {978-1-931971-30-0},
url = {https://www.usenix.org/conference/atc16/technical-sessions/presentation/kejriwal}
}

@inproceedings{tan:diffindex,
  author    = {Wei Tan and
               Sandeep Tata and
               Yuzhe Tang and
               Liana L. Fong},
  title     = {Diff-{I}ndex: {D}ifferentiated {I}ndex in {D}istributed {L}og-{S}tructured {D}ata
               {S}tores},
  booktitle = {Proceedings of the 17th International Conference on Extending Database
               Technology, {EDBT} 2014},
  year      = {2014},
  url       = {https://doi.org/10.5441/002/edbt.2014.76}
}

@inproceedings{tang:deferredindexing,
author = {Tang, Yuzhe and Iyengar, Arun and Tan, Wei and Fong, Liana and Liu, Ling and Palanisamy, Balaji},
title = {Deferred Lightweight Indexing for Log-Structured Key-Value Stores},
year = {2015},
isbn = {9781479980062},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/CCGrid.2015.150},
doi = {10.1109/CCGrid.2015.150},
abstract = {The recent shift towards write-intensive workload on big data (e.g., financial trading, social user-generated data streams) has pushed the proliferation of log-structured key-value stores, represented by Google's BigTable [1], Apache HBase [2] and Cassandra [3]. While providing key-based data access with a Put/Get interface, these key-value stores do not support value-based access methods, which significantly limits their applicability in modern web and database applications. In this paper, we present DELI, a DEferred Lightweight Indexing scheme on the log-structured key-value stores. To index intensively updated big data in real time, DELI aims at making the index maintenance as lightweight as possible. The key idea is to apply an append-only design for online index maintenance and to collect index garbage at carefully chosen time. DELI optimizes the performance of index garbage collection through tightly coupling its execution with a native routine process called compaction. The DELI's system design is fault-tolerant and generic (to most key-value stores); we implemented a prototype of DELI based on HBase without internal code modification. Our experiments show that the DELI offers significant performance advantage for the write-intensive index maintenance.},
booktitle = {Proceedings of the 15th IEEE/ACM International Symposium on Cluster, Cloud, and Grid Computing},
pages = {11–20},
numpages = {10},
location = {Shenzhen, China},
series = {CCGRID '15}
}

@inproceedings{baker:megastore,
title	= {Megastore: Providing Scalable, Highly Available Storage for Interactive Services},
author	= {Jason Baker and Chris Bond and James C. Corbett and JJ Furman and Andrey Khorlin and James Larson and Jean-Michel Leon and Yawei Li and Alexander Lloyd and Vadim Yushprakh},
year	= {2011},
URL	= {http://www.cidrdb.org/cidr2011/Papers/CIDR11_Paper32.pdf},
booktitle	= {Proceedings of the Conference on Innovative Data system Research (CIDR)},
}

@inproceedings{corbett:spanner,
author = {Bacon, David F. and Bales, Nathan and Bruno, Nico and Cooper, Brian F. and Dickinson, Adam and Fikes, Andrew and Fraser, Campbell and Gubarev, Andrey and Joshi, Milind and Kogan, Eugene and Lloyd, Alexander and Melnik, Sergey and Rao, Rajesh and Shue, David and Taylor, Christopher and van der Holst, Marcel and Woodford, Dale},
title = {Spanner: Becoming a SQL System},
year = {2017},
isbn = {9781450341974},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3035918.3056103},
doi = {10.1145/3035918.3056103},
abstract = {Spanner is a globally-distributed data management system that backs hundreds of mission-critical services at Google. Spanner is built on ideas from both the systems and database communities. The first Spanner paper published at OSDI'12 focused on the systems aspects such as scalability, automatic sharding, fault tolerance, consistent replication, external consistency, and wide-area distribution. This paper highlights the database DNA of Spanner. We describe distributed query execution in the presence of resharding, query restarts upon transient failures, range extraction that drives query routing and index seeks, and the improved blockwise-columnar storage format. We touch upon migrating Spanner to the common SQL dialect shared with other systems at Google.},
booktitle = {Proceedings of the 2017 ACM International Conference on Management of Data},
pages = {331--343},
numpages = {13},
keywords = {cloud computing, transactional databases, sql, distributed systems},
location = {Chicago, Illinois, USA},
series = {SIGMOD '17}
}

@inproceedings{bacon:spanner,
  author    = {David F. Bacon and
               Nathan Bales and
               Nicolas Bruno and
               Brian F. Cooper and
               Adam Dickinson and
               Andrew Fikes and
               Campbell Fraser and
               Andrey Gubarev and
               Milind Joshi and
               Eugene Kogan and
               Alexander Lloyd and
               Sergey Melnik and
               Rajesh Rao and
               David Shue and
               Christopher Taylor and
               Marcel van der Holst and
               Dale Woodford},
  title     = {Spanner: Becoming a {SQL} System},
  booktitle = {Proceedings of the 2017 {ACM} International Conference on Management
               of Data, {SIGMOD}},
  year      = {2017},
  url       = {https://doi.org/10.1145/3035918.3056103}
}

@article{cooper:pnuts08,
  author    = {Brian F. Cooper and
               Raghu Ramakrishnan and
               Utkarsh Srivastava and
               Adam Silberstein and
               Philip Bohannon and
               Hans{-}Arno Jacobsen and
               Nick Puz and
               Daniel Weaver and
               Ramana Yerneni},
  title     = {{PNUTS:} Yahoo!'s hosted data serving platform},
  journal   = {Proc. {VLDB} Endow.},
  year      = {2008},
  url       = {http://www.vldb.org/pvldb/vol1/1454167.pdf}
}

@article{cooper:pnuts19,
  author    = {Brian F. Cooper and
               P. P. S. Narayan and
               Raghu Ramakrishnan and
               Utkarsh Srivastava and
               Adam Silberstein and
               Philip Bohannon and
               Hans{-}Arno Jacobsen and
               Nick Puz and
               Daniel Weaver and
               Ramana Yerneni},
  title     = {{PNUTS} to Sherpa: Lessons from Yahoo!'s Cloud Database},
  journal   = {Proc. {VLDB} Endow.},
  year      = {2019},
  url       = {http://www.vldb.org/pvldb/vol12/p2300-cooper.pdf}
}

@inproceedings{sovran:walter,
  author    = {Yair Sovran and
               Russell Power and
               Marcos K. Aguilera and
               Jinyang Li},
  title     = {Transactional storage for geo-replicated systems},
  booktitle = {Proceedings of the 23rd {ACM} Symposium on Operating Systems Principles
               2011, {SOSP} 2011},
  year      = {2011},
  url       = {https://doi.org/10.1145/2043556.2043592}
}

@inproceedings{lloyd:cops,
  author    = {Wyatt Lloyd and
               Michael J. Freedman and
               Michael Kaminsky and
               David G. Andersen},
  editor    = {Ted Wobber and
               Peter Druschel},
  title     = {Don't settle for eventual: scalable causal consistency for wide-area
               storage with {COPS}},
  booktitle = {Proceedings of the 23rd {ACM} Symposium on Operating Systems Principles
               2011, {SOSP} 2011},
  year      = {2011},
  url       = {https://doi.org/10.1145/2043556.2043593}
}

@article{lakshman:cassandra,
  author    = {Avinash Lakshman and
               Prashant Malik},
  title     = {Cassandra: a decentralized structured storage system},
  journal   = {{ACM} {SIGOPS} Oper. Syst. Rev.},
  year      = {2010},
  url       = {https://doi.org/10.1145/1773912.1773922}
}

@article{chang:bigtable,
  author    = {Fay Chang and
               Jeffrey Dean and
               Sanjay Ghemawat and
               Wilson C. Hsieh and
               Deborah A. Wallach and
               Michael Burrows and
               Tushar Chandra and
               Andrew Fikes and
               Robert E. Gruber},
  title     = {Bigtable: {A} Distributed Storage System for Structured Data},
  journal   = {{ACM} Trans. Comput. Syst.},
  year      = {2008},
  url       = {https://doi.org/10.1145/1365815.1365816}
}

@online{lsm:vsbtree,
  title = {The advantages of an {LSM} vs a {B}-{T}ree},
  author = {Mark Callaghan},
  howpublished = {\url{http://smalldatum.blogspot.com/2016/01/summary-of-advantages-of-lsm-vs-b-tree.html}},
  year = {2016}
}

@article{oneil:lsmtree,
  author    = {Patrick E. O'Neil and
               Edward Cheng and
               Dieter Gawlick and
               Elizabeth J. O'Neil},
  title     = {The Log-Structured Merge-Tree (LSM-Tree)},
  journal   = {Acta Informatica},
  year      = {1996},
  url       = {https://doi.org/10.1007/s002360050048}
}

@online{leveldb:implnotes,
  title = {Level{DB} {I}mplementation {N}otes},
  author = {Jeffrey Dean and Sanjay Ghemawat},
  howpublished = {\url{https://github.com/google/leveldb/blob/master/doc/impl.md}},
  year = {2016}
}

@online{rocksdb:history,
  title = {The {H}istory of {R}ocks{DB}},
  author = {Dhruba Borthakur},
  howpublished = {\url{http://rocksdb.blogspot.com/2013/11/the-history-of-rocksdb.html}},
  year = {2013}
}

@online{hbase:hfile,
  title = {Apache {HB}ase {I}/{O} – {HF}ile},
  author = {Matteo Bertozzi},
  howpublished = {\url{https://blog.cloudera.com/apache-hbase-i-o-hfile/}},
  year = {2012}
}

@inproceedings{gray:replication,
  author    = {Jim Gray and
               Pat Helland and
               Patrick E. O'Neil and
               Dennis E. Shasha},
  title     = {The Dangers of Replication and a Solution},
  booktitle = {Proceedings of the 1996 {ACM} {SIGMOD} International Conference on
               Management of Data},
  year      = {1996},
  url       = {https://doi.org/10.1145/233269.233330}
}

@online{mongodb:joins,
  title = {Joins and {O}ther {A}ggregation {E}nhancements {C}oming in {M}ongo{DB} 3.2},
  author = {Andrew Morgan},
  howpublished = {\url{https://www.mongodb.com/blog/post/joins-and-other-aggregation-enhancements-coming-in-mongodb-3-2-part-1-of-3-introduction}},
  year = {2015}
}

@online{rethinkdb:joins,
  title = {Rethink{DB} {D}ocumentation: {T}able joins in {R}ethink{DB}},
  howpublished = {\url{https://rethinkdb.com/docs/table-joins/}},
  year = {2012}
}

@online{couchdb:joins,
  title = {Apache {C}ouch{DB} 3.1.0 {D}ocumentation: {J}oins {W}ith {V}iews},
  howpublished = {\url{http://docs.couchdb.com/en/latest/ddocs/views/joins.html}},
  author = {Apache Software Foundation},
  year = {2020}
}

@article{graefe:queryevaluation,
  author    = {Goetz Graefe},
  title     = {Query {E}valuation {T}echniques for {L}arge {D}atabases},
  journal   = {{ACM} Comput. Surv.},
  year      = {1993},
  url       = {https://doi.org/10.1145/152610.152611}
}

@article{hellerstein:databasearchitecture,
  author = {Hellerstein, Joseph M. and Stonebraker, Michael and Hamilton, James},
  title = {Architecture of a Database System},
  year = {2007},
  publisher = {Now Publishers Inc.},
  url = {https://doi.org/10.1561/1900000002},
  journal = {Found. Trends Databases}
}

@article{kossmann:distqeuryprocessing,
  author    = {Donald Kossmann},
  title     = {The State of the art in distributed query processing},
  journal   = {{ACM} Comput. Surv.},
  year      = {2000},
  url       = {https://doi.org/10.1145/371578.371598}
}

@book{silberschatz:dbbook,
  author    = {Avi Silberschatz and
               Henry F. Korth and
               S. Sudarshan},
  title     = {Database System Concepts, Seventh Edition},
  publisher = {McGraw-Hill Book Company},
  year      = {2020},
  url       = {https://www.db-book.com/db7/index.html}
}

@book{Silberschatz2010,
  added-at = {2010-07-18T14:00:17.000+0200},
  address = {New York},
  author = {Silberschatz, Abraham and Korth, Henry F. and Sudarshan, S.},
  biburl = {https://www.bibsonomy.org/bibtex/2f918632bd9810e92303843bba065d27d/voj},
  edition = 6,
  interhash = {f7b2016b63d72e5cfd3bc55af1deedbb},
  intrahash = {f918632bd9810e92303843bba065d27d},
  keywords = {databases textbook},
  publisher = {McGraw-Hill},
  timestamp = {2010-07-18T14:00:17.000+0200},
  title = {Database system concepts},
  url = {http://www.db-book.com/},
  year = 2010
}

@inproceedings{selinger:systemr,
  author    = {Patricia G. Selinger and
               Morton M. Astrahan and
               Donald D. Chamberlin and
               Raymond A. Lorie and
               Thomas G. Price},
  title     = {Access Path Selection in a Relational Database Management System},
  booktitle = {Proceedings of the 1979 {ACM} {SIGMOD} International Conference on
               Management of Data},
  year      = {1979},
  url       = {https://doi.org/10.1145/582095.582099}
}

@inproceedings{zhou:lazymvMaintenance,
  author    = {Jingren Zhou and
               Per{-}{\AA}ke Larson and
               Hicham G. Elmongui},
  title     = {Lazy Maintenance of Materialized Views},
  booktitle = {Proceedings of the 33rd International Conference on Very Large Data
               Bases},
  year      = {2007},
  url       = {http://www.vldb.org/conf/2007/papers/research/p231-zhou.pdf},
}

@inproceedings{larson:outerjoinviewmaintenance,
  author    = {Per{-}{\AA}ke Larson and
               Jingren Zhou},
  title     = {Efficient Maintenance of Materialized Outer-Join Views},
  booktitle = {Proceedings of the 23rd International Conference on Data Engineering,
               {ICDE}},
  year      = {2007},
  url       = {https://doi.org/10.1109/ICDE.2007.367851},
}

@inproceedings{lee:multiplejoinviewmaintenance,
  author    = {Ki Yong Lee and
               Myoung{-}Ho Kim},
  title     = {Optimizing the incremental maintenance of multiple join views},
  booktitle = {{DOLAP} 2005, {ACM} 8th International Workshop on Data Warehousing
               and OLAP},
  year      = {2005},
  url       = {https://doi.org/10.1145/1097002.1097021}
}

@inproceedings{zhuge:viewmaintenance,
  author    = {Yue Zhuge and
               Hector Garcia{-}Molina and
               Joachim Hammer and
               Jennifer Widom},
  title     = {View Maintenance in a Warehousing Environment},
  booktitle = {Proceedings of the 1995 {ACM} {SIGMOD} International Conference on
               Management of Data},
  year      = {1995},
  url       = {https://doi.org/10.1145/223784.223848}
}

@article{gupta:viewselection,
  author    = {Himanshu Gupta and
               Inderpal Singh Mumick},
  title     = {Selection of Views to Materialize in a Data Warehouse},
  journal   = {{IEEE} Trans. Knowl. Data Eng.},
  year      = {2005},
  url       = {https://doi.org/10.1109/TKDE.2005.16}
}

@article{mami:viewselection,
  author    = {Imene Mami and
               Zohra Bellahsene},
  title     = {A survey of view selection methods},
  journal   = {{SIGMOD} Record},
  year      = {2012},
  url       = {https://doi.org/10.1145/2206869.2206874}
}

@inproceedings{epstein:ingres,
  author    = {Robert S. Epstein and
               Michael Stonebraker and
               Eugene Wong},
  title     = {Distributed Query Processing in a Relational Data Base System},
  booktitle = {Proceedings of the 1978 {ACM} {SIGMOD} International Conference on
               Management of Data},
  year      = {1978},
  url       = {https://doi.org/10.1145/509252.509292}
}

@online{cockroachdb:docs,
  title = {Cockroach{DB} {D}ocs},
  author = {Cockroach {L}abs},
  howpublished = {\url{https://www.cockroachlabs.com/docs/stable/}},
  year = {2020}
}

@online{cockroachdb:distsql,
  title = {Cockroach{DB}: Distributing SQL queries},
  author = {Raphael Poss and Alex Robinson},
  howpublished = {\url{https://github.com/cockroachdb/cockroach/blob/master/docs/RFCS/20160421_distributed_sql.md}},
  year = {2020}
}

@online{redis:cache,
  title = {Redis {D}ocumentation: {U}sing {R}edis as an {LRU} cache},
  author = {Redis Labs},
  howpublished = {\url{https://redis.io/topics/lru-cache}},
}

@online{memcached:wiki,
  title = {Memcached {W}iki},
  howpublished = {\url{https://github.com/memcached/memcached/wiki}},
}

@online{coubase:mongoindexes,
  title = {Mongo{DB} fails to perform, runs out of gas},
  author = {{S}hane {J}ohnson},
  howpublished = {\url{https://blog.couchbase.com/mongodb-fails-to-perform-runs-out-of-gas/}},
  year = {2016}
}

@online{phoenix:secondaryidnexing,
  title = {{A}pache {P}hoenix: {S}econdary {I}ndexing},
  author = {{A}pache {S}oftware {F}oundation},
  howpublished = {\url{https://phoenix.apache.org/secondary_indexing.html}},
  year = {2020}
}

@online{hbase:secondaryindexes,
  title = {Apache {HB}ase {R}eference {G}uide: {S}econdary {I}ndexes and {A}lternate {Q}uery {P}aths},
  author = {{A}pache {HB}ase {T}eam},
  howpublished = {\url{http://hbase.apache.org/book.html#secondary.indexes}},
  year = {2020}
}

@inproceedings{kate:pequod,
author = {Bryan Kate and Eddie Kohler and Michael S. Kester and Neha Narula and Yandong Mao and Robert Morris},
title = {Easy Freshness with Pequod Cache Joins},
booktitle = {11th {USENIX} Symposium on Networked Systems Design and Implementation ({NSDI} 14)},
year = {2014},
isbn = {978-1-931971-09-6},
address = {Seattle, WA},
pages = {415--428},
url = {https://www.usenix.org/conference/nsdi14/technical-sessions/presentation/kate},
publisher = {{USENIX} Association},
month = apr,
}

-- Ch: Models --

@online{aws:athena,
  title = {Amazon {A}thena},
  author = {Amazon},
  howpublished = {\url{https://aws.amazon.com/athena/}},
  year = {accessed June 2020}
}

@online{aws:aurora,
  title = {Amazon {A}urora},
  author = {Amazon},
  howpublished = {\url{https://aws.amazon.com/rds/aurora/}},
  year = {accessed June 2020}
}

@online{aws:costcalc,
  title = {{AWS} {P}ricing {C}alculator},
  howpublished = {\url{http://calculator.aws/}},
  year = {accessed June 2020}
}

@online{aws:pricing,
  title = {Amazon {EC}2 {O}n-{D}emand {P}ricing},
  howpublished = {\url{https://aws.amazon.com/ec2/pricing/on-demand/}},
  year = {accessed August 2020}
}

@online{google:bigquery,
  title = {Google {B}ig {Q}uery},
  author = {Kazunori Sato},
  howpublished = {\url{https://cloud.google.com/files/BigQueryTechnicalWP.pdf}},
  year = {accessed June 2020}
}

@online{google:infra,
  title = {Google {E}dge {N}etwork},
  howpublished = {\url{https://peering.google.com/#/infrastructure}},
  urldate     = {2020-10-04}
}

@online{mariadb:triggers,
  title = {Maria{DB} {K}nowledge {B}ase: {T}rigger {O}verview},
  howpublished = {\url{https://mariadb.com/kb/en/trigger-overview/}},
  year = {accessed July 2020}
}

@online{awss3:notifications,
  title = {{AWS} {D}ocumentation. {A}mazon {S}imple {S}torage {S}ervice ({S}3): {C}onfiguring {A}mazon {S}3 event notifications},
  howpublished = {\url{https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html}},
  year = {accessed July 2020}
}

@online{awss3:tagging,
  title = {{AWS} {D}ocumentation. {A}mazon {S}imple {S}torage {S}ervice ({S}3): {O}bject tagging},
  howpublished = {\url{https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html}},
  year = {accessed July 2020}
}

@online{infoworld:cloudoutages,
  title = {Info{W}orld. {C}alculating the true cost of cloud outages},
  howpublished = {\url{https://www.infoworld.com/article/2613537/calculating-the-true-cost-of-cloud-outages.html}},
  year = {accessed July 2020}
}

@online{innodb:writepaths,
  title = {Deep {D}ive: {I}nnoDB {T}ransactions and {W}rite {P}aths},
  author = {Marko M\"akel\"a},
  howpublished = {\url{https://mariadb.org/wp-content/uploads/2018/02/Deep-Dive_-InnoDB-Transactions-and-Write-Paths.pdf}},
  year = {accessed August 2020}
}

@article{pbailis:hats,
  author    = {Peter Bailis and
               Aaron Davidson and
               Alan Fekete and
               Ali Ghodsi and
               Joseph M. Hellerstein and
               Ion Stoica},
  title     = {Highly Available Transactions: Virtues and Limitations},
  journal   = {Proceedings of the VLDB Endowment},
  year      = {2013},
  url       = {http://www.vldb.org/pvldb/vol7/p181-bailis.pdf},
  doi       = {10.14778/2732232.2732237},
  timestamp = {Sat, 25 Apr 2020 13:59:01 +0200},
  biburl    = {https://dblp.org/rec/journals/pvldb/BailisDFGHS13.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{ramsay/retrievaltimesinvestigation,
  author    = {Judith Ramsay and
               Alessandro Barabesi and
               Jennifer Preece},
  title     = {A psychological investigation of long retrieval times on the World
               Wide Web},
  journal   = {Interacting with Computers},
  year      = {1998},
  url       = {https://doi.org/10.1016/S0953-5438(97)00019-2},
  doi       = {10.1016/S0953-5438(97)00019-2},
  timestamp = {Fri, 13 Mar 2020 10:53:50 +0100},
  biburl    = {https://dblp.org/rec/journals/iwc/RamsayBP98.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{ceaparu:userfrustration,
  author    = {Irina Ceaparu and
               Jonathan Lazar and
               Katie Bessi{\`{e}}re and
               John P. Robinson and
               Ben Shneiderman},
  title     = {Determining Causes and Severity of End-User Frustration},
  journal   = {International Journal of Human-Computer Interaction},
  year      = {2004},
  url       = {https://doi.org/10.1207/s15327590ijhc1703\_3},
  doi       = {10.1207/s15327590ijhc1703\_3},
  timestamp = {Thu, 18 Jun 2020 22:01:41 +0200},
  biburl    = {https://dblp.org/rec/journals/ijhci/CeaparuLBRS04.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{bouch:qualityeyebeholder,
  author    = {Anna Bouch and
               Allan Kuchinsky and
               Nina T. Bhatti},
  title     = {Quality is in the eye of the beholder: meeting users' requirements
               for Internet quality of service},
  booktitle = {Proceedings of the {CHI} 2000 Conference on Human factors in computing
               systems},
  year      = {2000},
  url       = {https://doi.org/10.1145/332040.332447},
  doi       = {10.1145/332040.332447},
  timestamp = {Tue, 06 Nov 2018 16:58:43 +0100},
  biburl    = {https://dblp.org/rec/conf/chi/BouchKB00.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@online{schurman:rerformanceuserimpact,
  title={Performance related changes and their user impact},
  author={Eric Schurman and
          Jake Brutlag},
  howpublished = {\url{https://conferences.oreilly.com/velocity/velocity2009/public/schedule/detail/8523}},
  year={accessed June 2020}
}

@online{dixon:shopzillasiteredo,
  title={Shopzilla's {S}ite {R}edo - {Y}ou {G}et {W}hat {Y}ou {M}easure},
  author={Philip Dixon},
  howpublished = {\url{https://conferences.oreilly.com/velocity/velocity2009/public/schedule/detail/7709}},
  year={accessed June 2020}
}

@online{akamai:travelsiteperformance,
  title = {Akamai: Consumer {R}esponse to {T}ravel {S}ite {P}erformance},
  howpublished = {\url{https://www.akamai.com/us/en/about/news/press/2010-press/new-study-reveals-the-impact-of-travel-site-performance-on-consumers.jsp}},
  year = {accessed June 2020}
}

@book{buttcher:informationretrieval,
  author    = {Stefan B{\"{u}}ttcher and
               Charles L. A. Clarke and
               Gordon V. Cormack},
  title     = {Information Retrieval - Implementing and Evaluating Search Engines},
  publisher = {{MIT} Press},
  year      = {2010},
  url       = {http://mitpress.mit.edu/books/information-retrieval},
  isbn      = {978-0-262-02651-2},
  timestamp = {Sun, 06 Oct 2013 17:17:13 +0200},
  biburl    = {https://dblp.org/rec/books/daglib/0031897.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{shukla:schemaagnostic,
  author = {Shukla, Dharma and Thota, Shireesh and Raman, Karthik and Gajendran, Madhan and Shah, Ankur and Ziuzin,  Sergii and Sundaram, Krishnan and Guajardo, Miguel Gonzalez and Wawrzyniak, Anna and Boshra, Samer and Ferreira, Renato and Nassar, Mohamed and Koltachev, Michael and Huang, Ji and Sengupta, Sudipta and Levandoski, Justin and Lomet, David},
  title = {Schema-{A}gnostic {I}ndexing with {A}zure {D}ocument{DB}},
  booktitle = {Proceedings of the VLDB Endowment},
  year = {2015},
  month = {September},
  abstract = {Azure DocumentDB is Microsoftâs multi-tenant distributed database service for managing JSON documents at Internet scale. DocumentDB is now generally available to Azure developers. In this paper, we describe the DocumentDB indexing subsystem. DocumentDB indexing enables automatic indexing of documents without requiring a schema or secondary indices. Uniquely, DocumentDB provides real-time consistent queries in the face of very high rates of document updates. As a multi-tenant service, DocumentDB is designed to operate within extremely frugal resource budgets while providing predictable performance and robust resource isolation to its tenants. This paper describes the DocumentDB capabilities, including document representation, query language, document indexing approach, core index support, and early production experiences.},
  url = {https://www.microsoft.com/en-us/research/publication/schema-agnostic-indexing-azure-documentdb/},
  edition = {Proceedings of the VLDB Endowment},
}

@inproceedings{bouzeghoub:datafreshness,
  author    = {Mokrane Bouzeghoub and
               Ver{\'{o}}nika Peralta},
  title     = {A Framework for Analysis of Data Freshness},
  booktitle = {{IQIS} 2004, International Workshop on Information Quality in Information
               Systems},
  year      = {2004},
  url       = {https://doi.org/10.1145/1012453.1012464},
  doi       = {10.1145/1012453.1012464},
  timestamp = {Tue, 06 Nov 2018 16:57:28 +0100},
  biburl    = {https://dblp.org/rec/conf/iqis/BouzeghoubP04.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{bright:latencyrecency,
  author    = {Laura Bright and
               Louiqa Raschid},
  title     = {Using Latency-Recency Profiles for Data Delivery on the Web},
  booktitle = {Proceedings of 28th International Conference on Very Large Data Bases,
               {VLDB}},
  year      = {2002},
  url       = {http://www.vldb.org/conf/2002/S16P01.pdf},
  doi       = {10.1016/B978-155860869-6/50055-X},
  timestamp = {Thu, 12 Mar 2020 11:33:39 +0100},
  biburl    = {https://dblp.org/rec/conf/vldb/BrightR02.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{cho:dbfreshness,
  author    = {Junghoo Cho and
               Hector Garcia{-}Molina},
  title     = {Synchronizing a Database to Improve Freshness},
  booktitle = {Proceedings of the 2000 {ACM} {SIGMOD} International Conference on
               Management of Data},
  year      = {2000},
  url       = {https://doi.org/10.1145/342009.335391},
  doi       = {10.1145/342009.335391},
  timestamp = {Wed, 14 Nov 2018 10:56:19 +0100},
  biburl    = {https://dblp.org/rec/conf/sigmod/ChoG00.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{avigdor:obsolescent,
  author    = {Avigdor Gal},
  title     = {Obsolescent Materialized Views in Query Processing of Enterprise Information
               Systems},
  booktitle = {Proceedings of the 1999 {ACM} {CIKM} International Conference on Information
               and Knowledge Management},
  year      = {1999},
  url       = {https://doi.org/10.1145/319950.320029},
  doi       = {10.1145/319950.320029},
  timestamp = {Tue, 06 Nov 2018 16:57:49 +0100},
  biburl    = {https://dblp.org/rec/conf/cikm/Gal99.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{labrinidis:balancingperfomancefreshness,
  author    = {Alexandros Labrinidis and
               Nick Roussopoulos},
  title     = {Balancing Performance and Data Freshness in Web Database Servers},
  booktitle = {Proceedings of 29th International Conference on Very Large Data Bases,
               {VLDB}},
  year      = {2003},
  url       = {http://www.vldb.org/conf/2003/papers/S13P01.pdf},
  doi       = {10.1016/B978-012722442-8/50042-2},
  timestamp = {Thu, 12 Mar 2020 11:33:36 +0100},
  biburl    = {https://dblp.org/rec/conf/vldb/LabrinidisR03.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{kleppmann:designing,
  added-at = {2017-10-10T12:33:35.000+0200},
  author    = {Martin Kleppmann},
  biburl = {https://www.bibsonomy.org/bibtex/20e57a7b78887d15a8a2aec44dac76b04/schmitz},
  interhash = {092ae166c4379328d15362d9c16d4234},
  intrahash = {0e57a7b78887d15a8a2aec44dac76b04},
  isbn = {9781449373320},
  keywords = {bigdata bigdataseminar datascience},
  publisher = {O'Reilly Media},
  timestamp = {2017-10-10T12:33:35.000+0200},
  title = {Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems},
  url = {https://books.google.de/books?id=BM7woQEACAAJ},
  year = 2017
}

@inproceedings{nah:waitingtime,
  author    = {Fiona Fui{-}Hoon Nah},
  title     = {A Study on Tolerable Waiting Time: How Long Are Web Users Willing
               to Wait?},
  booktitle = {9th Americas Conference on Information Systems, {AMCIS}},
  year      = {2003},
  url       = {http://aisel.aisnet.org/amcis2003/285},
  timestamp = {Mon, 09 Jan 2012 12:53:25 +0100},
  biburl    = {https://dblp.org/rec/conf/amcis/Nah03.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{deCandia:dynamo,
  author    = {Giuseppe DeCandia and
               Deniz Hastorun and
               Madan Jampani and
               Gunavardhan Kakulapati and
               Avinash Lakshman and
               Alex Pilchin and
               Swaminathan Sivasubramanian and
               Peter Vosshall and
               Werner Vogels},
  title     = {Dynamo: amazon's highly available key-value store},
  booktitle = {Proceedings of the 21st {ACM} Symposium on Operating Systems Principles
               {SOSP}},
  year      = {2007},
  url       = {https://doi.org/10.1145/1294261.1294281},
  doi       = {10.1145/1294261.1294281},
  timestamp = {Wed, 14 Nov 2018 10:55:11 +0100},
  biburl    = {https://dblp.org/rec/conf/sosp/DeCandiaHJKLPSVV07.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{qi:secondaryindexconsistency,
  author    = {Houliang Qi and
               Xu Chang and
               Xingwu Liu and
               Li Zha},
  title     = {The Consistency Analysis of Secondary Index on Distributed Ordered
               Tables},
  booktitle = {2017 {IEEE} International Parallel and Distributed Processing Symposium
               Workshops {IPDPS}},
  year      = {2017},
  url       = {https://doi.org/10.1109/IPDPSW.2017.92},
  doi       = {10.1109/IPDPSW.2017.92},
  timestamp = {Wed, 16 Oct 2019 14:14:51 +0200},
  biburl    = {https://dblp.org/rec/conf/ipps/QiCLZ17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

-- Ch: Design space --

@inproceedings{valentin:db2advisor,
  author    = {Gary Valentin and
               Michael Zuliani and
               Daniel C. Zilio and
               Guy M. Lohman and
               Alan Skelley},
  title     = {{DB2} Advisor: An Optimizer Smart Enough to Recommend Its Own Indexes},
  booktitle = {Proceedings of the 16th International Conference on Data Engineering},
  year      = {2000},
  url       = {https://doi.org/10.1109/ICDE.2000.839397}
}

@inproceedings{chaudhuri:decadeselftuning,
  author    = {Surajit Chaudhuri and
               Vivek R. Narasayya},
  title     = {Self-Tuning Database Systems: {A} Decade of Progress},
  booktitle = {Proceedings of the 33rd International Conference on Very Large Data
               Bases, University of Vienna, Austria},
  year      = {2007},
  url       = {http://www.vldb.org/conf/2007/papers/special/p3-chaudhuri.pdf}
}

@inproceedings{dsilva:tworings,
  author    = {Joseph Vinish D'silva and
               Roger Ruiz{-}Carrillo and
               Cong Yu and
               Muhammad Yousuf Ahmad and
               Bettina Kemme},
  title     = {Secondary Indexing Techniques for Key-Value Stores: Two Rings To Rule
               Them All},
  booktitle = {Proceedings of the Workshops of the {EDBT/ICDT} 2017 Joint Conference
               {(EDBT/ICDT})},
  year      = {2017},
  url       = {http://ceur-ws.org/Vol-1810/DOLAP\_paper\_10.pdf}
}


@online{dynamodb:async,
  title = {Amazon {D}ynamo{DB} {D}ocumentation: {D}ata {S}ynchronization {B}etween {T}ables and {G}lobal {S}econdary {I}ndexes },
  author = {Amazon {W}eb {S}ervices},
  howpublished = {\url{https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html}},
  year = {2020}
}

@inproceedings{kleppmann:localfirst,
  author    = {Martin Kleppmann and
               Adam Wiggins and
               Peter van Hardenberg and
               Mark McGranaghan},
  title     = {Local-first software: you own your data, in spite of the cloud},
  booktitle = {Proceedings of the 2019 {ACM} {SIGPLAN} International Symposium on
               New Ideas, New Paradigms, and Reflections on Programming and Software},
  year      = {2019},
  url       = {https://doi.org/10.1145/3359591.3359737}
}

@inproceedings{brewer:cap,
  author    = {Armando Fox and
               Eric A. Brewer},
  title     = {Harvest, Yield and Scalable Tolerant Systems},
  booktitle = {Proceedings of The Seventh Workshop on Hot Topics in Operating Systems,
               HotOS-VII},
  year      = {1999},
  url       = {https://doi.org/10.1109/HOTOS.1999.798396},
}

@online{cockroachdb:geopartitioning,
  title = {Cockroach{DB} {B}log: {G}eo-{P}artitioning: {W}hat {G}lobal {D}ata {A}ctually {L}ooks {L}ike},
  author = {Andy Woods and
            Daniel Harrison},
  howpublished = {\url{https://www.cockroachlabs.com/blog/geo-partitioning-one/}},
  year = {2018}
}

-- Ch: Design pattern --

@article{leclercq:dream,
  author    = {Matthieu Leclercq and
               Vivien Qu{\'{e}}ma and
               Jean{-}Bernard Stefani},
  title     = {{DREAM:} {A} Component Framework for Constructing Resource-Aware,
               Configurable Middleware},
  journal   = {{IEEE} Distributed Syst. Online},
  year      = {2005},
  url       = {https://doi.org/10.1109/MDSO.2005.47}
}

@inproceedings{bouget:pleiades,
  author    = {Simon Bouget and
               Y{\'{e}}rom{-}David Bromberg and
               Adrien Luxey and
               Fran{\c{c}}ois Ta{\"{\i}}ani},
  title     = {Pleiades: Distributed Structural Invariants at Scale},
  booktitle = {48th Annual {IEEE/IFIP} International Conference on Dependable Systems
               and Networks, {DSN} 2018},
  year      = {2018}
}

-- Ch: Related work --

@inproceedings{qader:comparativestudy,
  author    = {Mohiuddin Abdul Qader and
               Shiwen Cheng and
               Vagelis Hristidis},
  title     = {A Comparative Study of Secondary Indexing Techniques in LSM-based
               NoSQL Databases},
  booktitle = {Proceedings of the 2018 International Conference on Management of
               Data, {SIGMOD} Conference},
  year      = {2018},
  url       = {https://doi.org/10.1145/3183713.3196900}
}

@article{kohler:click,
  author    = {Eddie Kohler and
               Robert Tappan Morris and
               Benjie Chen and
               John Jannotti and
               M. Frans Kaashoek},
  title     = {The click modular router},
  journal   = {{ACM} Trans. Comput. Syst.},
  year      = {2000},
  url       = {https://doi.org/10.1145/354871.354874}
}

@inproceedings{escriva:hyperdex,
  author    = {Robert Escriva and
               Bernard Wong and
               Emin G{\"{u}}n Sirer},
  title     = {HyperDex: a distributed, searchable key-value store},
  booktitle = {{ACM} {SIGCOMM} 2012 Conference, {SIGCOMM} '12},
  pages     = {25--36},
  publisher = {{ACM}},
  year      = {2012},
  url       = {https://doi.org/10.1145/2342356.2342360}
}

@inproceedings{tai:replex,
  author    = {Amy Tai and
               Michael Wei and
               Michael J. Freedman and
               Ittai Abraham and
               Dahlia Malkhi},
  title     = {Replex: {A} Scalable, Highly Available Multi-Index Data Store},
  booktitle = {2016 {USENIX} Annual Technical Conference, {USENIX} {ATC} 2016},
  publisher = {{USENIX} Association},
  year      = {2016},
  url       = {https://www.usenix.org/conference/atc16/technical-sessions/presentation/tai}
}

@inproceedings{yates:multisitefeasibility,
author = {Baeza-Yates, Ricardo and Gionis, Aristides and Junqueira, Flavio and Plachouras, Vassilis and Telloli, Luca},
title = {On the Feasibility of Multi-Site Web Search Engines},
year = {2009},
isbn = {9781605585123},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1645953.1646009},
doi = {10.1145/1645953.1646009},
abstract = {Web search engines are often implemented as centralized systems. Designing and implementing a Web search engine in a distributed environment is a challenging engineering task that encompasses many interesting research questions. However, distributing a search engine across multiple sites has several advantages, such as utilizing less compute resources and exploiting data locality. In this paper we investigate the cost-effectiveness of building a distributed Web search engine. We propose a model for assessing the total cost of a distributed Web search engine that includes the computational costs and the communication cost among all distributed sites. We then present a query-processing algorithm that maximizes the amount of queries answered locally, without sacrificing the quality of the results compared to a centralized search engine. We simulate the algorithm on real document collections and query workloads to measure the actual parameters needed for our cost model, and we show that a distributed search engine can be competitive compared to a centralized architecture with respect to real cost.},
booktitle = {Proceedings of the 18th ACM Conference on Information and Knowledge Management},
pages = {425–434},
numpages = {10},
keywords = {query processing, cost model, distributed systems, web search},
location = {Hong Kong, China},
series = {CIKM '09}
}

@inproceedings{cambazoglu:multisitequantifying,
author = {Cambazoglu, B Barla and Plachouras, Vassilis and Baeza-Yates, Ricardo},
title = {Quantifying Performance and Quality Gains in Distributed Web Search Engines},
year = {2009},
isbn = {9781605584836},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1571941.1572013},
doi = {10.1145/1571941.1572013},
abstract = {Distributed search engines based on geographical partitioning of a central Web index emerge as a feasible solution to the immense growth of the Web, user bases, and query traffic. However, there is still lack of research in quantifying the performance and quality gains that can be achieved by such architectures. In this paper, we develop various cost models to evaluate the performance benefits of a geographically distributed search engine architecture based on partial index replication and query forwarding. Specifically, we focus on possible performance gains due to the distributed nature of query processing and Web crawling processes. We show that any response time gain achieved by distributed query processing can be utilized to improve search relevance as the use of complex but more accurate algorithms can now be enabled for document ranking. We also show that distributed Web crawling leads to better Web coverage and try to see if this improves the search quality. We verify the validity of our claims over large, real-life datasets via simulations.},
booktitle = {Proceedings of the 32nd International ACM SIGIR Conference on Research and Development in Information Retrieval},
pages = {411–418},
numpages = {8},
keywords = {index partitioning, web crawling, data centers, distributed query processing},
location = {Boston, MA, USA},
series = {SIGIR '09}
}

@inproceedings{cambazoglu:multisiteforwarding,
author = {Cambazoglu, B. Barla and Varol, Emre and Kayaaslan, Enver and Aykanat, Cevdet and Baeza-Yates, Ricardo},
title = {Query Forwarding in Geographically Distributed Search Engines},
year = {2010},
isbn = {9781450301534},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1835449.1835467},
doi = {10.1145/1835449.1835467},
abstract = {Query forwarding is an important technique for preserving the result quality in distributed search engines where the index is geographically partitioned over multiple search sites. The key component in query forwarding is the thresholding algorithm by which the forwarding decisions are given. In this paper, we propose a linear-programming-based thresholding algorithm that significantly outperforms the current state-of-the-art in terms of achieved search efficiency values. Moreover, we evaluate a greedy heuristic for partial index replication and investigate the impact of result cache freshness on query forwarding performance. Finally, we present some optimizations that improve the performance further, under certain conditions. We evaluate the proposed techniques by simulations over a real-life setting, using a large query log and a document collection obtained from Yahoo!.},
booktitle = {Proceedings of the 33rd International ACM SIGIR Conference on Research and Development in Information Retrieval},
pages = {90–97},
numpages = {8},
keywords = {linear programming, optimization, search engines, distributed ir, query forwarding, index replication, result caching},
location = {Geneva, Switzerland},
series = {SIGIR '10}
}

@inproceedings{frances:multisiteefficiency,
author = {Franc\`{e}s, Guillem and Bai, Xiao and Cambazoglu, B. Barla and Baeza-Yates, Ricardo},
title = {Improving the Efficiency of Multi-Site Web Search Engines},
year = {2014},
isbn = {9781450323512},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2556195.2556249},
doi = {10.1145/2556195.2556249},
abstract = {A multi-site web search engine is composed of a number of search sites geographically distributed around the world. Each search site is typically responsible for crawling and indexing the web pages that are in its geographical neighborhood. A query is selectively processed on a subset of search sites that are predicted to return the best-matching results. The scalability and efficiency of multi-site web search engines have attracted a lot of research attention in recent years. In particular, research has focused on replicating important web pages across sites, forwarding queries to relevant sites, and caching results of previous queries. Yet, these problems have only been studied in isolation, but no prior work has properly investigated the interplay between them.In this paper, we take this challenge up and conduct what we believe is the first comprehensive analysis of a full stack of techniques for efficient multi-site web search. Specifically, we propose a document replication technique that improves the query locality of the state-of-the-art approaches with various replication budget distribution strategies. We devise a machine learning approach to decide the query forwarding patterns, achieving a significantly lower false positive ratio than a state-of-the-art thresholding approach with little negative impact on search result quality. We propose three result caching strategies that reduce the number of forwarded queries and analyze the trade-off they introduce in terms of storage and network overheads. Finally, we show that the combination of the best-of-the-class techniques yields very promising search efficiency, rendering multi-site, geographically distributed web search engines an attractive alternative to centralized web search engines.},
booktitle = {Proceedings of the 7th ACM International Conference on Web Search and Data Mining},
pages = {3–12},
numpages = {10},
keywords = {document replication, result caching, query processing, query forwarding, efficiency, distributed web search},
location = {New York, New York, USA},
series = {WSDM '14}
}

@article{kayaaslan:multisitereplication,
title = {Document replication strategies for geographically distributed web search engines},
journal = {Information Processing \& Management},
volume = {49},
number = {1},
pages = {51--66},
year = {2013},
issn = {0306--4573},
doi = {https://doi.org/10.1016/j.ipm.2012.01.002},
url = {http://www.sciencedirect.com/science/article/pii/S0306457312000039},
author = {Enver Kayaaslan and B. Barla Cambazoglu and Cevdet Aykanat},
keywords = {Web search, Distributed information retrieval, Document replication, Query processing, Query forwarding, Result caching},
abstract = {Large-scale web search engines are composed of multiple data centers that are geographically distant to each other. Typically, a user query is processed in a data center that is geographically close to the origin of the query, over a replica of the entire web index. Compared to a centralized, single-center search engine, this architecture offers lower query response times as the network latencies between the users and data centers are reduced. However, it does not scale well with increasing index sizes and query traffic volumes because queries are evaluated on the entire web index, which has to be replicated and maintained in all data centers. As a remedy to this scalability problem, we propose a document replication framework in which documents are selectively replicated on data centers based on regional user interests. Within this framework, we propose three different document replication strategies, each optimizing a different objective: reducing the potential search quality loss, the average query response time, or the total query workload of the search system. For all three strategies, we consider two alternative types of capacity constraints on index sizes of data centers. Moreover, we investigate the performance impact of query forwarding and result caching. We evaluate our strategies via detailed simulations, using a large query log and a document collection obtained from the Yahoo! web search engine.}
}

@inproceedings{cambazoglu:yahoorefreshing,
author = {Cambazoglu, Berkant Barla and Junqueira, Flavio P. and Plachouras, Vassilis and Banachowski, Scott and Cui, Baoqiu and Lim, Swee and Bridge, Bill},
title = {A Refreshing Perspective of Search Engine Caching},
year = {2010},
isbn = {9781605587998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1772690.1772710},
doi = {10.1145/1772690.1772710},
abstract = {Commercial Web search engines have to process user queries over huge Web indexes under tight latency constraints. In practice, to achieve low latency, large result caches are employed and a portion of the query traffic is served using previously computed results. Moreover, search engines need to update their indexes frequently to incorporate changes to the Web. After every index update, however, the content of cache entries may become stale, thus decreasing the freshness of served results. In this work, we first argue that the real problem in today's caching for large-scale search engines is not eviction policies, but the ability to cope with changes to the index, i.e., cache freshness. We then introduce a novel algorithm that uses a time-to-live value to set cache entries to expire and selectively refreshes cached results by issuing refresh queries to back-end search clusters. The algorithm prioritizes the entries to refresh according to a heuristic that combines the frequency of access with the age of an entry in the cache. In addition, for setting the rate at which refresh queries are issued, we present a mechanism that takes into account idle cycles of back-end servers. Evaluation using a real workload shows that our algorithm can achieve hit rate improvements as well as reduction in average hit ages. An implementation of this algorithm is currently in production use at Yahoo!.},
booktitle = {Proceedings of the 19th International Conference on World Wide Web},
pages = {181–190},
numpages = {10},
keywords = {web search engines, caching, index updates, refresh},
location = {Raleigh, North Carolina, USA},
series = {WWW '10}
}

@article{ousterhout:ramcloud,
  author    = {John K. Ousterhout and
               Arjun Gopalan and
               Ashish Gupta and
               Ankita Kejriwal and
               Collin Lee and
               Behnam Montazeri and
               Diego Ongaro and
               Seo Jin Park and
               Henry Qin and
               Mendel Rosenblum and
               Stephen M. Rumble and
               Ryan Stutsman and
               Stephen Yang},
  title     = {The RAMCloud Storage System},
  journal   = {{ACM} Trans. Comput. Syst.},
  year      = {2015},
  url       = {https://doi.org/10.1145/2806887},
}

@inproceedings{frances:multisiteimprovingefficiency,
  author    = {Guillem Franc{\`{e}}s and
               Xiao Bai and
               Berkant Barla Cambazoglu and
               Ricardo Baeza{-}Yates},
  title     = {Improving the efficiency of multi-site web search engines},
  booktitle = {Seventh {ACM} International Conference on Web Search and Data Mining,
               {WSDM} 2014, New York, NY, USA, February 24-28, 2014},
  pages     = {3--12},
  publisher = {{ACM}},
  year      = {2014},
  url       = {https://doi.org/10.1145/2556195.2556249},
  doi       = {10.1145/2556195.2556249},
  timestamp = {Sun, 22 Sep 2019 18:15:38 +0200},
  biburl    = {https://dblp.org/rec/conf/wsdm/FrancesBCB14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings {gjengset:noria,
  author = {Jon Gjengset and Malte Schwarzkopf and Jonathan Behrens and Lara Timb{\'o} Ara{\'u}jo and Martin Ek and Eddie Kohler and M. Frans Kaashoek and Robert Morris},
  title = {Noria: dynamic, partially-stateful data-flow for high-performance web applications},
  booktitle = {13th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 18)},
  year = {2018},
  url = {https://www.usenix.org/conference/osdi18/presentation/gjengset},
  publisher = {{USENIX} Association}
}

@online{lobste:rs,
  author = {Lobsters {D}evelopers},
  title = {Lobsters {N}ews {A}ggregator},
  howpublished = {\url{https://lobste.rs/}}
}

@online{lobste:stats,
  author = {Peter {B}hat {H}arkins, {J}on {G}jengset},
  title = {Lobsters {A}ccess {P}attern {S}tatistics},
  howpublished = {\url{https://lobste.rs/s/cqnzl5/lobste_rs_access_pattern_statistics_for#c_hj0r1b}}
}

@online{aws:s3,
  author = {Amazon {W}eb {S}ervices},
  title = {Amazon {S3} {API} {R}eference},
  howpublished = {\url{https://docs.aws.amazon.com/AmazonS3/latest/API/s3-api.pdf#Type_API_Reference}},
  year = {2006}
}

@online{zenko:docs,
  author = {Scality},
  title = {Zenko 1.2.0 {D}ocumentation},
  howpublished = {\url{https://zenko.readthedocs.io/en/latest/index.html}},
  year = {2020}
}

@online{zenko:architecture,
  author = {Scality},
  title = {Zenko 1.2.0 {D}ocumentation: {A}rchitecture},
  howpublished = {\url{https://zenko.readthedocs.io/en/latest/operation/Architecture/index.html}},
  year = {2020}
}

@online{zenko:mongodb,
  author = {Scality},
  title = {Zenko 1.2.0 {D}ocumentation: {M}ongo{DB}},
  howpublished = {\url{https://zenko.readthedocs.io/en/latest/operation/Architecture/MongoDB.html}},
  year = {2020}
}

@online{zenko:mdsearch,
  author = {Scality},
  title = {Cloudserver {D}ocumentation},
  howpublished = {\url{https://github.com/scality/cloudserver/blob/9615d51c9e0500db37905dcfd04b17187132eddf/docs/MD_SEARCH.rst}},
  year = {2020}
}

@online{zenko:outofband,
  author = {Scality},
  title = {Zenko 1.2.0 {D}ocumentation: {O}ut-of-{B}and {U}pdates},
  howpublished = {\url{https://github.com/scality/cloudserver/blob/9615d51c9e0500db37905dcfd04b17187132eddf/docs/MD_SEARCH.rst}},
  year = {2020}
}

@online{scality:bloomberg,
  author = {Scality},
  title = {Customer {C}ase {S}tudies: {B}loomberg {M}edia {G}roup},
  howpublished = {\url{https://www.scality.com/customers/bloomberg/}}
}

@techreport{zhou:partiallymaterialized,
author = {Zhou, Jingren and Larson, Paul and Goldstein, Jonathan},
title = {Partially Materialized Views},
year = {2005},
month = {June},
abstract = {We propose a new type of materialized view called a partially materialized view. A partially materialized view only materializes some of the rows, for example, the most frequently accessed rows, which reduces storage space and view maintenance effort. One or more control tables are associated with the view and define which rows are currently materialized. As a result, one can easily change which rows of the view are stored and maintained. We show how to extend view matching and maintenance algorithms to partially materialized views and outline several potential applications of the new view type. Experimental results in Microsoft SQL Server show that compared with fully materialized views, partially materialized views have lower storage requirements, better buffer pool efficiency, better query performance, and significantly lower maintenance costs.},
url = {https://www.microsoft.com/en-us/research/publication/partially-materialized-views/},
number = {MSR-TR-2005-77},
}

@inproceedings{zhou:dynamicmaterialized,
  author    = {Jingren Zhou and
               Per{-}{\AA}ke Larson and
               Jonathan Goldstein and
               Luping Ding},
  title     = {Dynamic Materialized Views},
  booktitle = {Proceedings of the 23rd International Conference on Data Engineering,
               {ICDE} 2007, The Marmara Hotel, Istanbul, Turkey, April 15-20, 2007},
  pages     = {526--535},
  publisher = {{IEEE} Computer Society},
  year      = {2007},
  url       = {https://doi.org/10.1109/ICDE.2007.367898},
  doi       = {10.1109/ICDE.2007.367898},
  timestamp = {Wed, 16 Oct 2019 14:14:56 +0200},
  biburl    = {https://dblp.org/rec/conf/icde/ZhouLGD07.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@misc{lobsters:schema,
	author = {Lobsters {D}evelopers},
  title = {Lobsters {D}atabase {S}chema (schema.rb)},
	howpublished = {\url{https://github.com/lobsters/lobsters/blob/df5b1e0487094405af196b6322dc09192f27ee5b/db/schema.rb#L195}},
	year = {2020},
  month = {August}
  }

@inproceedings{nishtala:memcachefacebook,
  author    = {Rajesh Nishtala and
               Hans Fugal and
               Steven Grimm and
               Marc Kwiatkowski and
               Herman Lee and
               Harry C. Li and
               Ryan McElroy and
               Mike Paleczny and
               Daniel Peek and
               Paul Saab and
               David Stafford and
               Tony Tung and
               Venkateshwaran Venkataramani},
  title     = {Scaling Memcache at Facebook},
  booktitle = {Proceedings of the 10th {USENIX} Symposium on Networked Systems Design
               and Implementation, {NSDI}},
  year      = {2013},
  url       = {https://www.usenix.org/conference/nsdi13/technical-sessions/presentation/nishtala},
}

@online{mariadb:docs,
  author = {Maria{DB} {F}oundation},
  title = {Maria{DB} {D}ocumentation},
  howpublished = {\url{https://mariadb.org/documentation/}},
  year = {2020}
}

@online{antidotedb:docs,
  author = {Antidote{DB} {D}evelopers},
  title = {Antidote{DB} {D}ocumentation},
  howpublished = {\url{https://antidotedb.gitbook.io/documentation/}}
}

@online{mysql:docs,
  author = {{O}racle {C}orporation},
  title = {My{SQL} 8.0 {R}eference {M}anual},
  howpublished = {\url{https://dev.mysql.com/doc/refman/8.0/en/}},
  year = {2020}
}

@misc{cloudserver:github,
	author = {Scality},
  title = {Zenko {C}loudServer},
	howpublished = {\url{https://github.com/scality/cloudserver/}},
}

@article{docker,
author = {Merkel, Dirk},
title = {Docker: Lightweight Linux Containers for Consistent Development and Deployment},
year = {2014},
issue_date = {March 2014},
publisher = {Belltown Media},
address = {Houston, TX},
volume = {2014},
number = {239},
issn = {1075-3583},
abstract = {Docker promises the ability to package applications and their dependencies into lightweight containers that move easily between different distros, start up quickly and are isolated from each other.},
journal = {Linux J.},
month = mar,
articleno = {2},
numpages = {1}
}

@online{docker:swarm,
  title = {Docker {S}warm},
  howpublished = {\url{https://docs.docker.com/engine/swarm/}},
  year = {2020}
}

@online{docker:composefile,
  title = {Docker {C}ompose file format},
  howpublished = {\url{https://docs.docker.com/compose/compose-file/}},
  year = {2020}
}

@online{yaml,
  title = {YAML {A}in't {M}arkup {L}anguage},
  howpublished = {\url{https://yaml.org/}},
  year = {2020}
}

@online{toml,
  author = {Tom Preston-Werner},
  title = {Tom's {O}bvious, {M}inimal {L}anguage.},
  howpublished = {\url{https://toml.io/en/}},
  year = {2020}
}

@article{agrawal:taxonomy,
  author    = {Divy Agrawal and
               Amr El Abbadi and
               Kenneth Salem},
  title     = {A Taxonomy of Partitioned Replicated Cloud-based Database Systems},
  journal   = {{IEEE} Data Eng. Bull.},
  year      = {2015},
  url       = {http://sites.computer.org/debull/A15mar/p4.pdf},
}

@inproceedings {vuppalapati:elasticqueryengine,
author = {Midhul Vuppalapati and Justin Miron and Rachit Agarwal and Dan Truong and Ashish Motivala and Thierry Cruanes},
title = {Building An Elastic Query Engine on Disaggregated Storage },
booktitle = {17th {USENIX} Symposium on Networked Systems Design and Implementation ({NSDI} 20)},
year = {2020},
isbn = {978-1-939133-13-7},
address = {Santa Clara, CA},
pages = {449--462},
url = {https://www.usenix.org/conference/nsdi20/presentation/vuppalapati},
publisher = {{USENIX} Association},
month = feb,
}
@online{couchbase:nosqladoption,
  author = {James Phillips},
  title = {Surprises in our {N}o{SQL} adoption survey},
  howpublished = {\url{https://blog.couchbase.com/nosql-adoption-survey-surprises/}},
  year = {December 2014}
}

@article{graefe:volcano,
author = {Graefe, G.},
title = {Volcano— An Extensible and Parallel Query Evaluation System},
year = {1994},
issue_date = {February 1994},
publisher = {IEEE Educational Activities Department},
address = {USA},
volume = {6},
number = {1},
issn = {1041--4347},
url = {https://doi.org/10.1109/69.273032},
doi = {10.1109/69.273032},
abstract = {To investigate the interactions of extensibility and parallelism in database query processing, we have developed a new dataflow query execution system called Volcano. The Volcano effort provides a rich environment for research and education in database systems design, heuristics for query optimization, parallel query execution, and resource allocation. Volcano uses a standard interface between algebra operators, allowing easy addition of new operators and operator implementations. Operations on individual items, e.g., predicates, are imported into the query processing operators using support functions. The semantics of support functions is not prescribed; any data type including complex objects and any operation can be realized. Thus, Volcano is extensible with new operators, algorithms, data types, and type-specific methods. Volcano includes two novel meta-operators. The choose-plan meta-operator supports dynamic query evaluation plans that allow delaying selected optimization decisions until run-time, e.g., for embedded queries with free variables. The exchange meta-operator supports intra-operator parallelism on partitioned datasets and both vertical and horizontal inter-operator parallelism, translating between demand-driven dataflow within processes and data-driven dataflow between processes. All operators, with the exception of the exchange operator, have been designed and implemented in a single-process environment, and parallelized using the exchange operator. Even operators not yet designed can be parallelized using this new operator if they use and provide the interator interface. Thus, the issues of data manipulation and parallelism have become orthogonal, making Volcano the first implemented query execution engine that effectively combines extensibility and parallelism.},
journal = {IEEE Trans. on Knowl. and Data Eng.},
month = feb,
pages = {120-–135},
numpages = {16},
keywords = {intra-operator parallelism, choose-plan meta-operator, semantics, data structures, algebra operators, resource allocation, parallel query evaluation system, parallel programming, data type, dynamic query evaluation plans, data-driven dataflow, demand-driven dataflow, support functions, query optimization, predicates, partitioned datasets, database query processing, horizontal inter-operator parallelism, dataflow query execution system, extensibility, query processing operators, query processing, Volcano, type-specific methods., novel meta-operators}
}

@article{lakshmanan:placementstrategies,
author = {Lakshmanan, Geetika T. and Li, Ying and Strom, Rob},
title = {Placement Strategies for Internet-Scale Data Stream Systems},
year = {2008},
issue_date = {November 2008},
publisher = {IEEE Educational Activities Department},
address = {USA},
volume = {12},
number = {6},
issn = {1089-7801},
url = {https://doi.org/10.1109/MIC.2008.129},
doi = {10.1109/MIC.2008.129},
abstract = {Optimally assigning streaming tasks to network machines is a key factor that influences a large data-stream-processing system's performance. Although researchers have prototyped and investigated various algorithms for task placement in data stream management systems, taxonomies and surveys of such algorithms are currently unavailable. To tackle this knowledge gap, the authors identify a set of core placement design characteristics and use them compare eight placement algorithms. They also present a heuristic decision tree that can help designers judge how suitable a given placement solutions might be to specific problems.},
journal = {IEEE Internet Computing},
month = nov,
pages = {50–60},
numpages = {11},
keywords = {data-management systems, data stream management, task-placement algorithms, system performance, stream processing}
}

@inproceedings{pietzuch:networkawareopplacement,
author = {P. Pietzuch and J. Shneidman and M. Roussopoulos and J. Ledlie and M. Seltzer and M. Welsh},
booktitle = {22nd International Conference on Data Engineering},
title = {Network-Aware Operator Placement for Stream-Processing Systems},
year = {2006},
volume = {},
issn = {},
pages = {49},
keywords = {null},
doi = {10.1109/ICDE.2006.105},
url = {https://doi.ieeecomputersociety.org/10.1109/ICDE.2006.105},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {apr}
}

@article{stonebraker:streamprocessingrequirements,
author = {Stonebraker, Michael and \c{C}etintemel, Uundefinedur and Zdonik, Stan},
title = {The 8 Requirements of Real-Time Stream Processing},
year = {2005},
issue_date = {December 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {34},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/1107499.1107504},
doi = {10.1145/1107499.1107504},
abstract = {Applications that require real-time processing of high-volume data steams are pushing the limits of traditional data processing infrastructures. These stream-based applications include market feed processing and electronic trading on Wall Street, network and infrastructure monitoring, fraud detection, and command and control in military environments. Furthermore, as the "sea change" caused by cheap micro-sensor technology takes hold, we expect to see everything of material significance on the planet get "sensor-tagged" and report its state or location in real time. This sensorization of the real world will lead to a "green field" of novel monitoring and control applications with high-volume and low-latency processing requirements.Recently, several technologies have emerged---including off-the-shelf stream processing engines---specifically to address the challenges of processing high-volume, real-time data without requiring the use of custom code. At the same time, some existing software technologies, such as main memory DBMSs and rule engines, are also being "repurposed" by marketing departments to address these applications.In this paper, we outline eight requirements that a system software should meet to excel at a variety of real-time stream processing applications. Our goal is to provide high-level guidance to information technologists so that they will know what to look for when evaluation alternative stream processing solutions. As such, this paper serves a purpose comparable to the requirements papers in relational DBMSs and on-line analytical processing. We also briefly review alternative system software technologies in the context of our requirements.The paper attempts to be vendor neutral, so no specific commercial products are mentioned.},
journal = {SIGMOD Rec.},
month = dec,
pages = {42–47},
numpages = {6}
}

@inproceedings{agarwal:volley,
author = {Agarwal, Sharad and Dunagan, John and Jain, Navendu and Saroiu, Stefan and Wolman, Alec and Bhogan, Harbinder},
title = {Volley: Automated Data Placement for Geo-Distributed Cloud Services},
year = {2010},
publisher = {USENIX Association},
address = {USA},
abstract = {As cloud services grow to span more and more globally distributed datacenters, there is an increasingly urgent need for automated mechanisms to place application data across these datacenters. This placement must deal with business constraints such as WAN bandwidth costs and datacenter capacity limits, while also minimizing user-perceived latency. The task of placement is further complicated by the issues of shared data, data inter-dependencies, application changes and user mobility. We document these challenges by analyzing month-long traces from Microsoft's Live Messenger and Live Mesh, two large-scale commercial cloud services.We present Volley, a system that addresses these challenges. Cloud services make use of Volley by submitting logs of datacenter requests. Volley analyzes the logs using an iterative optimization algorithm based on data access patterns and client locations, and outputs migration recommendations back to the cloud service.To scale to the data volumes of cloud service logs, Volley is designed to work in SCOPE [5], a scalable MapReduce-style platform; this allows Volley to perform over 400 machine-hours worth of computation in less than a day. We evaluate Volley on the month-long Live Mesh trace, and we find that, compared to a state-of-the-art heuristic that places data closest to the primary IP address that accesses it, Volley simultaneously reduces datacenter capacity skew by over 2\texttimes{}, reduces inter-datacenter traffic by over 1.8\texttimes{} and reduces 75th percentile user-latency by over 30%.},
booktitle = {Proceedings of the 7th USENIX Conference on Networked Systems Design and Implementation},
pages = {2},
numpages = {1},
location = {San Jose, California},
series = {NSDI'10}
}